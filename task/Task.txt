For this laboratories you are given:
* main topic,
* sample data for the given topic,
* main representation format for the given data,
* secondary representation format for the given data.


Explanation:
Main representation format is a format in which user will view data stored in your application,
this is a format which is readable for humans and easy to use.


Secondary representation format is a format you will use to store data in.
Sometimes used technology, 3rd party dependencies or interaction with someone
else's API forces us to use representation that isn't the most natural for humans.


You will have to create a way to interface your data stored in the secondary format with the main one.


As a note for the future, during this course you will be asked to add some parts to the program that
may force you to change the code that you’ve already created. Try to create your solution in a way
allowing for maximum modularity, for example: adding a new secondary representation should only require
small adjustments to the program. Mostly by adding new classes not modifying existing ones. 


As a task for today:
1. Create classes/structs/interfaces that will store provided data, do this for both formats,
2. Create objects for both formats containing provided data,
3. Print those objects, results should be the same,
4. Create the means to access secondary format through the first one - you should create an adapter
that will use the objects stored in a secondary format and present them to the user in a main format.
Think of it in the following way: User will only interact with the main format, while the secondary
format is a format in which objects are stored in a database. Changes to way user can interact with
main format should not require changes to secondary formats classes/structs/interfaces.
5. Print the data using the means from 4), result should be the same with 3)
