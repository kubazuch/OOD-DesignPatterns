The Byteot ZOO was founded in 0x7CF by King Byteasar 0xD the Wise. In the ZOO
we have *enclosures* that have a name (string), a list of *animals*
inhabiting them and an *employee* responsible for a given *enclosure*. Each
animal has a name (string), age (positive int) and *species*. Each *species*
consists of a *name* and, in the case of carnivorous species, a list of
favorite foods (species). Each employee has a first name (string), last name
(string), age (positive int), and a list of *enclosures* they look after. In
addition, in order to better adjust the offer, the zoo registers visitors.
For each visitor, his name (string), last name (string) and the list of
*enclosures* that he visited are saved.

Possible representations:
	0 - Base representation. Objects with references - references are used for connections between objects.
		Enclosure
			- name (string)
			- animals (list of animals refs)
			- employee (employee ref)
			
		Animal
			- name (string)
			- age (int)
			- species (species ref)
			
		Species
			- name (string)
			- favouriteFoods (list of species refs) (only for carnivorous)
		
		Employee
			- name (string)
			- surname (string)
			- age (int)
			- enclosures (list of enclosures refs)

		Visitor 
			- name (string)
			- surname (string)
			- visitedEnclosures (list of enclosures refs)
			
	1. Objects with indexes - like 0. but instead of references objects use
	name (or name and surname for employees and visitors) corresponding to referenced object.

	2. Text - all objects are represented as single string containing all the data in format specified below.
	References to objects are handled like 1.
		Enclosure - "<name>@<employee name> <employee surname>,<animal name>,..."
		Animal - "<name>(<age>)%<species name>"
		Species - "<name>$<favouriteFoods name>,..."
		Employee - "<name> <surname>(<age>)@<enclosure name>,..."
		Visitor - "<name> <surname>@<enclosure name>,..."
		
		Notation used:
			<-> - value ( - is a name of field)
			[-] - optional ( - is a name of field)
			-,... - possible repetitions ( - is a string of tokens that can logically repeat)

	3. Partial text - some fields contain nonatomic data. Mix between objects with references and text representations.
	References to objects are handled like 1.
		Enclosure
			- name (string)
			- employee "<employee name><employee surname>"
			- animals "(<animal name>),..."
			
		Animal - "<name>(<age>)%<species name>"

		Species
			- name (string)
			- favouriteFoods "<favouriteFoods name>"
			
		Employee
			- identity "<surname>,<name>"
			- age (int)
			- enclosures "<enclosure name>,..."

		Visitor
			- identity "<surname>,<name>"
			- visitedEnclosures "<enclosure name>,..."

	4. Hashmap - representation like 1., but every non-reference field is key (int) in common map int->string. 
	Each key is C# hash of that string (using builtin C# hash).

	5. Semi-binary format: Each class have additional field named "data" which is array of bytes. Rest is like 
	in 1., but instead of each field we have "<fieldname>_addr" and "<fieldname_count>". "<fieldname>_addr" 
	is address (index) of data of that field in array "data" and "<fieldname_count>" is number of elements 
	(in case of list type - number of elements, otherwise 1, if element is optional it may be 0 and _addr doesn't matter).

	6.Each class contain id (int) and map string->string.
	Representation is similar to 1. but data is accesed as string in that map.
	For simple types the key is field name and value is field value as string. For array types there are keys
	"fieldname.Size()" to get number of elements of array and "fieldname[i]" to get given element of array (all as string).

	7. Representation like 1. but class have only list of pairs (fieldname, value). 
	So have List<Tuple<string, Object>> to represent each object. That value of type Object must 
	be casted to propter type to be used.

	8. All objects are represented as pairs Tuple<int,Stack<string>>, where the first item is the corresponding object's ID, same as in representation 1.
	The second item is a stack, where data is stored as follows:
	1) push field value (or all IDs of referenced objects),
	2) push 1 (or the number of referenced object IDs),
	3) push field name,
	4) repeat for the other fields, in the same order as listed in the base representation (0).
